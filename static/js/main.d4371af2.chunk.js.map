{"version":3,"sources":["features/api/users.ts","features/api/posts.ts","features/store.ts","Components/UserCard/UserCard.tsx","Components/UserPost/UserPost.tsx","Components/Loader/Loader.tsx","Components/UserPostsList/UserPostsList.tsx","Components/UsersList/UsersList.tsx","Components/ControlButtons/ControlButtons.tsx","Components/Header/Header.tsx","App.tsx","index.tsx"],"names":["GET_USERS_ENDPOINT","usersApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getUsersFromServer","query","endPoint","useGetUsersFromServerQuery","postsApi","getPostsByUserId","userId","useGetPostsByUserIdQuery","store","configureStore","reducer","users","postsByUserId","middleware","getDefaultMiddleware","concat","UserCard","React","memo","props","user","setUserId","className","cn","name","href","email","phone","website","type","onClick","id","UserPost","title","body","Loader","data-cy","UserPostsList","closeList","posts","data","isFetching","isError","classNames","map","post","UsersList","isSorted","useState","isLoading","pageId","useParams","useSearchParams","searchQuery","get","navigate","useNavigate","cardIndexes","useMemo","item","filteredUsers","preparedUsers","filter","toLowerCase","includes","sort","userA","userB","localeCompare","ControlButtons","setIsSorted","page","setPage","pagesCount","length","Math","ceil","setPageHandler","typeBtn","prevState","to","Header","searchParams","setSearchParams","placeholder","value","onChange","event","createSearchParams","target","App","path","element","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4371af2.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { User } from '../../Types/User';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const GET_USERS_ENDPOINT = 'users';\n\nexport const usersApi = createApi({\n  reducerPath: 'users',\n  baseQuery: fetchBaseQuery({ baseUrl: BASE_URL }),\n  endpoints: (builder) => ({\n\n    getUsersFromServer: builder.query<User[], string>({\n      query: (endPoint) => endPoint,\n    }),\n\n  }),\n});\n\nexport const { useGetUsersFromServerQuery } = usersApi;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { Post } from '../../Types/Post';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/users/';\n\nexport const postsApi = createApi({\n  reducerPath: 'postsByUserId',\n  baseQuery: fetchBaseQuery({ baseUrl: BASE_URL }),\n  endpoints: (builder) => ({\n\n    getPostsByUserId: builder.query<Post[], number | null>({\n      query: (userId) => `${userId}/posts`,\n    }),\n\n  }),\n});\n\nexport const { useGetPostsByUserIdQuery } = postsApi;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { usersApi } from './api/users';\nimport { postsApi } from './api/posts';\n\nexport const store = configureStore({\n  reducer: {\n    users: usersApi.reducer,\n    postsByUserId: postsApi.reducer,\n  },\n  middleware: (getDefaultMiddleware) => {\n    return getDefaultMiddleware()\n      .concat(usersApi.middleware)\n      .concat(postsApi.middleware);\n  },\n});\n","import React from 'react';\nimport './UserCard.scss';\nimport cn from 'classnames';\nimport { User } from '../../Types/User';\n\ntype Props = {\n  user: User,\n  userId: number | null,\n  setUserId: CallableFunction,\n};\n\nexport const UserCard: React.FC<Props> = React.memo((props) => {\n  const { user, setUserId, userId } = props;\n\n  return (\n    <div className={cn('user-card', { 'user-card--active': userId })}>\n      <h3 className=\"user-card__text\">{user.name}</h3>\n      <a\n        href={`mailto:${user.email}`}\n        className=\"user-card__text\"\n      >\n        {user.email}\n      </a>\n      <a\n        href={`tel:${user.phone}`}\n        className=\"user-card__text\"\n      >\n        {user.phone}\n      </a>\n      <a\n        href={`https://${user.website}`}\n        className=\"user-card__text\"\n      >\n        {user.website}\n      </a>\n      <button\n        className={cn(\n          'user-card__button',\n          { 'user-card__button--active': userId },\n        )}\n        type=\"button\"\n        onClick={() => setUserId(user.id)}\n      >\n        Show posts\n      </button>\n    </div>\n  );\n});\n","import React from 'react';\nimport './UserPost.scss';\n\ntype Props = {\n  title: string,\n  body: string,\n};\n\nexport const UserPost: React.FC<Props> = React.memo((props) => {\n  const { title, body } = props;\n\n  return (\n    <div className=\"user-post\">\n      <h3 className=\"user-post__title\">{title}</h3>\n      <p className=\"user-post__text\">{body}</p>\n      <div className=\"user-post__line\"></div>\n    </div>\n  );\n});\n","import './Loader.scss';\nimport React from 'react';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './UserPostsList.scss';\nimport classNames from 'classnames';\nimport { useGetPostsByUserIdQuery } from '../../features/api/posts';\nimport { UserPost } from '../UserPost/UserPost';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  userId: number | null,\n  closeList: CallableFunction,\n};\n\nexport const UserPostsList:React.FC<Props> = React.memo((props) => {\n  const { userId, closeList } = props;\n  const { data: posts, isFetching, isError } = useGetPostsByUserIdQuery(userId);\n\n  return (\n    <section className={classNames(\n      'user-posts-list',\n      { 'user-posts-list--active': userId },\n    )}\n    >\n      <button\n        type=\"button\"\n        className=\"user-posts-list__btn-close\"\n        onClick={() => closeList(null)}\n      >\n        X\n      </button>\n      {isFetching && <Loader />}\n      {isError && (\n        <p className=\"users-list__error\">Something went wrong. Try again!</p>\n      )}\n      {!isFetching && posts && posts.map(post => (\n        <UserPost\n          key={post.id}\n          title={post.title}\n          body={post.body}\n        />\n      ))}\n    </section>\n  );\n});\n","import React, { useMemo, useState } from 'react';\nimport './UsersList.scss';\nimport { useParams, useSearchParams, useNavigate } from 'react-router-dom';\nimport { UserCard } from '../UserCard/UserCard';\nimport {\n  GET_USERS_ENDPOINT,\n  useGetUsersFromServerQuery,\n} from '../../features/api/users';\nimport { UserPostsList } from '../UserPostsList/UserPostsList';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  isSorted: 'asc' | 'desc' | null,\n};\n\nexport const UsersList: React.FC<Props> = (props) => {\n  const { isSorted } = props;\n\n  const [userId, setUserId] = useState<number | null>(null);\n\n  const { data: users, isLoading, isError } = useGetUsersFromServerQuery(\n    GET_USERS_ENDPOINT,\n  );\n  const { pageId } = useParams();\n  const [searchParams] = useSearchParams('query');\n  const searchQuery: string = searchParams.get('query') || '';\n  const navigate = useNavigate();\n\n  const cardIndexes = useMemo(() => {\n    return [0, 1, 2, 3].map(item => {\n      if (pageId && +pageId > 1) {\n        return item + (4 * (+pageId - 1));\n      }\n\n      return item;\n    });\n  }, [pageId]);\n\n  const filteredUsers = useMemo(() => {\n    if (!isSorted && pageId && +pageId !== 1) {\n      navigate('/page/1');\n    }\n\n    const preparedUsers = users?.filter(user => {\n      return user.name.toLowerCase().includes(searchQuery.toLowerCase());\n    });\n\n    if (isSorted === 'asc') {\n      return preparedUsers?.sort((userA, userB) => {\n        return userA.name.localeCompare(userB.name);\n      });\n    }\n\n    if (isSorted === 'desc') {\n      return preparedUsers?.sort((userA, userB) => {\n        return userB.name.localeCompare(userA.name);\n      });\n    }\n\n    return preparedUsers;\n  }, [users, searchQuery, isSorted]);\n\n  return (\n    <div className=\"wrapper\">\n      <section className=\"users-list\">\n        {isLoading && <Loader />}\n        {isError && (\n          <p className=\"users-list__error\">Something went wrong. Try again!</p>\n        )}\n        {filteredUsers && !isLoading && (\n          <>\n            <div className=\"users-list__wrapper\">\n              {filteredUsers[cardIndexes[0]] && (\n                <UserCard\n                  user={filteredUsers[cardIndexes[0]]}\n                  userId={userId}\n                  setUserId={setUserId}\n                />\n              )}\n              {filteredUsers[cardIndexes[1]] && (\n                <UserCard\n                  user={filteredUsers[cardIndexes[1]]}\n                  userId={userId}\n                  setUserId={setUserId}\n                />\n              )}\n            </div>\n            <div className=\"users-list__wrapper\">\n              {filteredUsers[cardIndexes[2]] && (\n                <UserCard\n                  user={filteredUsers[cardIndexes[2]]}\n                  userId={userId}\n                  setUserId={setUserId}\n                />\n              )}\n              {filteredUsers[cardIndexes[3]] && (\n                <UserCard\n                  user={filteredUsers[cardIndexes[3]]}\n                  userId={userId}\n                  setUserId={setUserId}\n                />\n              )}\n            </div>\n          </>\n        )}\n      </section>\n      <UserPostsList\n        userId={userId}\n        closeList={setUserId}\n      />\n    </div>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  GET_USERS_ENDPOINT,\n  useGetUsersFromServerQuery,\n} from '../../features/api/users';\nimport './ControlButtons.scss';\n\ntype Props = {\n  setIsSorted: CallableFunction,\n};\n\nexport const ControlButtons: React.FC<Props> = (props) => {\n  const { setIsSorted } = props;\n  const [page, setPage] = useState(1);\n\n  const { data: users } = useGetUsersFromServerQuery(\n    GET_USERS_ENDPOINT,\n  );\n\n  const pagesCount = useMemo(() => (\n    users?.length ? Math.ceil(users.length / 4) : 0\n  ), [page, users]);\n\n  const setPageHandler = (typeBtn: string) => {\n    if (typeBtn === 'back') {\n      setPage((prevState) => {\n        if (prevState === 1) {\n          return prevState;\n        }\n\n        return prevState - 1;\n      });\n    }\n\n    if (typeBtn === 'forward') {\n      setPage((prevState) => {\n        if (prevState === pagesCount) {\n          return prevState;\n        }\n\n        return prevState + 1;\n      });\n    }\n  };\n\n  return (\n    <div className=\"control-buttons\">\n      <Link\n        className=\"control-buttons__link\"\n        to={`page/${page - 1 || 1}`}\n        onClick={() => setPageHandler('back')}\n      >\n        <span className=\"control-buttons__item\"> &lt; </span>\n        Previous\n      </Link>\n\n      <button\n        type=\"button\"\n        className=\"control-buttons__sort-btn\"\n        onClick={() => {\n          setIsSorted('asc');\n        }}\n      >\n        Sort ASC\n      </button>\n\n      <button\n        type=\"button\"\n        className=\"control-buttons__sort-btn\"\n        onClick={() => {\n          setIsSorted('desc');\n        }}\n      >\n        Sort DESC\n      </button>\n\n      <Link\n        className=\"control-buttons__link\"\n        to={`page/${page + 1 > pagesCount ? 3 : page + 1}`}\n        onClick={() => setPageHandler('forward')}\n      >\n        Next\n        <span className=\"control-buttons__item\"> &gt; </span>\n      </Link>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Header.scss';\nimport { createSearchParams, useSearchParams } from 'react-router-dom';\n\nexport const Header: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams('query');\n  const searchQuery: string = searchParams.get('query') || '';\n\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__title\">Users post</h1>\n      <div className=\"header__search-block\">\n        <input\n          className=\"header__search-input\"\n          type=\"search\"\n          placeholder=\"Search\"\n          value={searchQuery}\n          onChange={(event) => setSearchParams(\n            createSearchParams({ query: event.target.value }),\n          )}\n        />\n      </div>\n    </header>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport {\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { UsersList } from './Components/UsersList/UsersList';\nimport { ControlButtons } from './Components/ControlButtons/ControlButtons';\nimport { Header } from './Components/Header/Header';\n\nexport const App: React.FC = () => {\n  const [isSorted, setIsSorted] = useState<'asc' | 'desc' | null>(null);\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <Routes>\n        <Route path=\"/\" element={<UsersList isSorted={isSorted} />} />\n        <Route path=\"page\">\n          <Route index element={<UsersList isSorted={isSorted} />} />\n          <Route path=\":pageId\" element={<UsersList isSorted={isSorted} />} />\n        </Route>\n        <Route path=\"*\" element={<h1>Page not found!</h1>} />\n      </Routes>\n\n      <ControlButtons setIsSorted={setIsSorted} />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './features/store';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}